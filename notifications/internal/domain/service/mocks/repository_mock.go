// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "route256/notifications/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, userID, orderID, status
func (_m *Repository) Add(ctx context.Context, userID int64, orderID int64, status string) error {
	ret := _m.Called(ctx, userID, orderID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) error); ok {
		r0 = rf(ctx, userID, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLst provides a mock function with given fields: ctx, userID
func (_m *Repository) GetLst(ctx context.Context, userID int64) ([]*model.Notification, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.Notification, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.Notification); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
