// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "route256/checkout/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// Loms is an autogenerated mock type for the loms type
type Loms struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, userId, items
func (_m *Loms) CreateOrder(ctx context.Context, userId int64, items []*model.CartItem) (int64, error) {
	ret := _m.Called(ctx, userId, items)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.CartItem) (int64, error)); ok {
		return rf(ctx, userId, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.CartItem) int64); ok {
		r0 = rf(ctx, userId, items)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []*model.CartItem) error); ok {
		r1 = rf(ctx, userId, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stocks provides a mock function with given fields: ctx, sku
func (_m *Loms) Stocks(ctx context.Context, sku uint32) ([]*model.Stock, error) {
	ret := _m.Called(ctx, sku)

	var r0 []*model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]*model.Stock, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []*model.Stock); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoms creates a new instance of Loms. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoms(t interface {
	mock.TestingT
	Cleanup(func())
}) *Loms {
	mock := &Loms{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
